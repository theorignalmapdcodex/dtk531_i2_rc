# def on_message(client, userdata, msg):
#     # 1. Receive and decode the MQTT message
#     received_message = msg.payload.decode()
#     print("\nA. Message Payload From Developed JSON file via a subscription topic:\n", received_message, "\n")

#     # 2. Create a prompt for the Gemini API
#     prompt = f"Generate a summary analysis of this school and its corresponding data for a student willing to go to college in the US and [[one historic event that stands out for this college. While providing the university's logo image]] Here is the information: {received_message}"

#     # 3. Call the Gemini API
#     try:
#         response = gemini_model.generate_content(prompt).text
#         print("\nB. Gemini LLM Response:\n")
#         for line in response.split("\n"):
#             print(f"  - {line}")
#         print("\n")
        
#         # Saving only the response to a JSON file as context for future LLM interactions
#         with open("llm_responses.json", "a") as f:
#             json.dump(response, f, indent=4)
#             f.write("\n") 
#     except Exception as e:
#         print(f"Error calling Gemini API: {e}")
        
#     # 4. Separator
#     print("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n")